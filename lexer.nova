import regex

enum TokenType {
  // Keywords
  IMPORT, FROM, MODULE, PACKAGE, TASK, FREE_TASK, UNFREE_TASK, REPEAT_TASK, GO_ROUTINE, 
  SET, RETURN, PRINT, IF, ELSE, FOR, IN, TRY, CATCH, FINALLY, MATCH, CASE, DEFAULT, MACRO, ENUM, STRUCT,

  // Literals
  IDENTIFIER, NUMBER, FLOAT, STRING, BOOLEAN, NULL,

  // Operators
  PLUS, MINUS, STAR, SLASH, PERCENT, 
  EQ, NEQ, LT, LTEQ, GT, GTEQ, 
  AND, OR, NOT, BITWISE_OR, BITWISE_AND, BITWISE_XOR, 
  LSHIFT, RSHIFT,

  // Other
  LPAREN, RPAREN, LBRACE, RBRACE, LBRACKET, RBRACKET,
  SEMICOLON, COMMA, COLON, DOT,

  EOF
}

task tokenize(code) {

  set tokens = []
  set line = 1
  set col = 1

  repeat code as char {

    if regex.match("\\s", char) {
      // Ignore whitespace
      if char == "\n" {
        line++
        col = 1 
      }
      continue
    }

    if regex.match("//.*\\n", char) {
      // Ignore single line comments
      continue 
    }

    if regex.match("/\\*.*\\*/", char) {
      // Ignore multi-line comments
      continue
    }

    check_match char {

      case "import" => emit(IMPORT)
      case "from" => emit(FROM)
      case "module" => emit(MODULE)
      case "package" => emit(PACKAGE)
      case "task" => emit(TASK)
      case "free_task" => emit(FREE_TASK)
      case "unfree_task" => emit(UNFREE_TASK)
      case "repeat_task" => emit(REPEAT_TASK) 
      case "go_routine" => emit(GO_ROUTINE)
      case "set" => emit(SET)
      case "return" => emit(RETURN)
      case "print" => emit(PRINT)
      case "if" => emit(IF)
      case "else" => emit(ELSE)
      case "for" => emit(FOR)
      case "in" => emit(IN)  
      case "try" => emit(TRY)
      case "catch" => emit(CATCH)
      case "finally" => emit(FINALLY)
      case "match" => emit(MATCH)
      case "case" => emit(CASE)
      case "default" => emit(DEFAULT)
      case "macro" => emit(MACRO)
      case "enum" => emit(ENUM)
      case "struct" => emit(STRUCT)

      case "+" => emit(PLUS)
      case "-" => emit(MINUS)
      case "*" => emit(STAR)
      case "/" => emit(SLASH)
      case "%" => emit(PERCENT)
      case "==" => emit(EQ)
      case "!=" => emit(NEQ)
      case "<" => emit(LT)
      case "<=" => emit(LTEQ)
      case ">" => emit(GT)
      case ">=" => emit(GTEQ)
      case "and" => emit(AND)
      case "or" => emit(OR)
      case "not" => emit(NOT)
      case "|" => emit(BITWISE_OR)
      case "&" => emit(BITWISE_AND)
      case "^" => emit(BITWISE_XOR)
      case "<<" => emit(LSHIFT)
      case ">>" => emit(RSHIFT)

      case "(" => emit(LPAREN)
      case ")" => emit(RPAREN) 
      case "{" => emit(LBRACE)
      case "}" => emit(RBRACE)
      case "[" => emit(LBRACKET)
      case "]" => emit(RBRACKET)
      case ";" => emit(SEMICOLON)
      case "," => emit(COMMA)
      case ":" => emit(COLON)
      case "." => emit(DOT)

      case regex.match("[a-zA-Z_][a-zA-Z_0-9]*") => 
        emit(IDENTIFIER, matched(0))

      case regex.match("[0-9]+(\\.[0-9]+)?") =>
        if regex.contains("\\.", matched(0)) {
          emit(FLOAT, matched(0)) 
        } else {
          emit(NUMBER, matched(0))
        }

      case regex.match("\"[^\"]*\"") =>
        emit(STRING, matched(0)) 

      case "yes" => emit(BOOLEAN, "yes")
      case "no" => emit(BOOLEAN, "no")

      case "null" => emit(NULL)

      default => {
        print("Invalid character")
        return
      }

    }

    col++

  }

  emit(EOF)

  return tokens

}

task emit(type, value) {
  if !value {
    value = ""
  }
  add(tokens, {type: type, value: value, line: line, col: col}) 
}

set tokens = tokenize(code)


// New tokens
LAMBDA, GENERIC, ANNOTATION, NULL_COALESCE

task tokenize(code) {

  // Existing lexer logic

  case "->" => {
    consume()
    if match(LBRACE) {
      emit(LAMBDA) 
    } else {
      emit(RETURN_TYPE)
    }
  }

  case "<" => {
    consume()
    if match(IDENTIFIER) {
      emit(GENERIC)
    } else {
      emit(LT)
    }
  }

  case "@" => {
    consume()
    emit(ANNOTATION)
  }

  case "??" => {
    emit(NULL_COALESCE)
  }

  // Rest of lexer
}

// Multi-line comments
multiline_comment = "/*" .* "*/" 

// Multi-line string literals
multiline_string = '"""' .* '"""'

