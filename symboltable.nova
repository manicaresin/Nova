// symboltable.nova

import {AST nodes} from 'ast'

class SymbolTable {

  symbols: Map<String, DeclarationNode> = {}

  func define(name: String, decl: DeclarationNode) {
    symbols[name] = decl 
  }

  func resolve(name: String) -> DeclarationNode {
    if name in symbols {
      return symbols[name]
    } else {
      return null
    }
  }

}

// Usage

set table = new SymbolTable() 

// On variable declaration
table.define("x", varDeclNode)

// On function declaration 
table.define("sum", funcDeclNode)  

// Later on reference
set xDecl = table.resolve("x")
if !xDecl {
  error("Undefined variable x")
}

set sumDecl = table.resolve("sum")
if !sumDecl {
  error("Undefined function sum")
}

// Classes add fields and methods
class MyClass {
  field: number

  func method() {} 
}

func checkClass(classNode) {
  set table = new SymbolTable()

  for field in classNode.fields {
    table.define(field.name, field)
  }

  for method in classNode.methods {
    table.define(method.name, method) 
  }

  // Can now resolve fields/methods
}

// Class scopes  
set table = new SymbolTable()

// Add fields and methods
for field in classNode.fields {
  table.define(field.name, field) 
}

for method in classNode.methods {
  table.define(method.name, method)
}

// Interface scopes
set table = new SymbolTable() 

for method in interfaceNode.methods {
  table.define(method.name, method)
}

// Module scopes
set table = new ModuleSymbolTable()
// Define module-level symbols
