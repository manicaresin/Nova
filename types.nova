// types.nova

import {AST nodes} from 'ast'

enum BuiltinType {
  NUMBER,
  STRING,
  BOOL
}

class Type {
  // Base type
}

class BuiltinType extends Type {
  BuiltinType type; 
}

class FunctionType extends Type {
  Type returnType;
  List<Type> argTypes;
}

// The type checker 
class TypeChecker {

  // Check a program AST
  func check(program ASTNode) {
    for statement in program.statements {
      checkStatement(statement)
    }
  }

  func checkStatement(stmt ASTNode) {
    match stmt {
      // Check variable declaration
      VariableDecl(name, type) -> {
        checkType(type)
      }
      
      // Check function declaration
      FunctionDecl(name, args, returnType, body) -> {
        checkType(returnType)

        for arg in args {
          checkType(arg.type) 
        }

        checkBlock(body)
      } 

      // Check block statement
      Block(stmts) -> {
        checkBlock(stmts)
      }
    }
  }

  func checkBlock(stmts List<ASTNode>) {
    for stmt in stmts {
      checkStatement(stmt) 
    }
  }

  func checkType(type Type) {
    // Verify type is valid
  }

  // Check binary expression
  func checkBinaryExpr(expr BinaryExprAST) {
    checkExpr(expr.left)
    checkExpr(expr.right)
    
    // Verify left & right types are compatible 
  }

  // Check other expression types...

  func checkExpr(expr ASTNode) {
    match expr {
      BinaryExpr(left, right) -> checkBinaryExpr(expr)
      // Other expr checks...

      Variable(name) -> {
        // Lookup name in symbol table
        // Get variable type
      }
    }
  }

}

// Usage

set tree = parse(code)
set checker = TypeChecker()
checker.check(tree) // Check program


// types.nova

// Symbol table 
class SymbolTable {
  Map<String, Type> symbols
  
  func define(name String, type Type) {
    symbols[name] = type 
  }
  
  func resolve(name String) -> Type {
    return symbols[name]
  }
}

// Type checker
class TypeChecker {

  SymbolTable symbols

  func check(program ASTNode) {
   symbols = new SymbolTable()  
   // ... check program
  }

  func checkFunction(func FunctionDecl) {
    // Define function name and param types
    symbols.define(func.name, func.type) 
    
    for param in func.params {
      symbols.define(param.name, param.type)
    }
    
    // Check function body
    checkBlock(func.body)
  }
  
  func checkCall(call CallExpr) {
    set funcType = resolve(call.func) 
    
    if !(funcType instanceof FunctionType) {
      error("Not a function")
    }
    
    if call.args.length != funcType.argTypes.length {
      error("Arg count mismatch") 
    }
    
    // Check arg types match signature
  }
  
  // Check user-defined types
  func checkType(type Type) {
    match type {
      NamedType(name) -> {
        set resolved = resolve(name)
        if !resolved {
          error("Undefined type "+ name)
        }
      } 
    }
  }
  
}


// Class type
ClassType extends UserDefinedType {
  fields: List<VariableDecl>
  methods: List<FunctionDecl>
}

// Interface type  
InterfaceType extends UserDefinedType {
  methods: List<FunctionSignature> 
}

func checkClass(class ClassDecl) {
  // Verify class implements interfaces properly
  
  // Check class method signatures match interfaces  
}

class GenericType extends Type {
  TypeParameter params
}

func checkGenericCall(call CallExpr) {
  set funcType = getType(call.func) // Resolve function type

  if funcType instanceof GenericFunction {
    // Bind type parameters  
  }

  // Check argument types
}

func checkIfStmt(if IfStatement) {
  checkExpr(if.condition) // Check condition
  
  checkBlock(if.body)

  if if.elseBody != null {
    checkBlock(if.elseBody)
  } 
}

func checkLoop(loop Loop) {
  checkExpr(loop.condition) // Check condition
  
  checkBlock(loop.body) // Check body
}


func checkProgram(prog Program) {
  
  // Build separate symbol table per module
  for module in prog.modules {
    symbols = new SymbolTable()
    checkModule(module) 
  }
  
}

class TypeChecker {

  table: SymbolTable

  func check(node: Node) {

    if node is AssignNode {

      if !table.resolve(node.target) {
        error("Undefined variable " + node.target)
      }

      check(node.value)
    }

    if node is BinaryExprNode {
      check(node.left)
      check(node.right) 

      # Further type checking...

    }

    if node is VariableNode {
      if !table.resolve(node.name) {
        error("Undefined variable " + node.name)
      }
    }

    # Check other node types...

  }

  func checkBlock(stmts: List<Node>) {
    each stmt in stmts {
      check(stmt)
    }
  }

}

// Generics

class GenericType {
  TypeParameter parameters;
  Type elementType; 
}

// Pattern matching

func checkMatch(expr ExprNode, cases [MatchCaseNode]) {

  // Infer expression type
  let exprType = typeOf(expr) 

  checkMatchCases(exprType, cases)

}

func checkMatchCases(exprType Type, cases [MatchCaseNode]) {

  for case in cases {
    
    checkPattern(case.pattern, exprType)
    
    // Type check body

  }

} 

// Function overloading

class FunctionOverload {
  List<FunctionSignature> overloads;
}

func findOverload(name String, args [Type]) -> FunctionSignature {
  // Find best match
}

// Modules

class ModuleSymbolTable {
  // Contains symbols for a module
}

func check(tree ASTNode) {

  // Each module has own symbol table
  for module in tree.modules {
    symbols = ModuleSymbolTable() 
    check(module) 
  }

}

// Check function calls
func checkCall(call CallNode) {

  let func = table.resolve(call.name)

  if !(func instanceof FunctionDecl) {
    error("Not a function")
  }

  if call.args.length != func.params.length {
    error("Arg count mismatch")
  }

  // Check args match param types
  each(call.args as arg) {
    let paramType = func.params[#].type 
    checkType(arg, paramType) 
  }

}

// Check return statements  
func checkReturn(return ReturnNode) {
  
  let func = # Find enclosing function
  if !func.returnType {
    error("Return not expected")
  }

  if return.value {
    checkType(return.value, func.returnType)
  } else if func.returnType != void {   
    error("Expected return value")
  }

}

// In checkClass()

OverrideTable overrides = new OverrideTable()

for method in class.methods {
  overrides.add(method) 
}

// When checking a method call

let resolved = overrides.resolve(call.name) 
if !resolved {
  // No method found 
}

checkCall(call, resolved) // Type check against resolved method

func check(node Node) {

  if node instanceof ReturnNode {
    currentFunction.returned = true 
  }
  
  if currentFunction.returned {
    if node instanceof Expression {
      warn("Unreachable code") 
    }
  }

  // Rest of checking

}

class NestedGenericType {
  GenericType outer;
  GenericType inner; 
}

func checkGenericCall(call CallNode) {

  if call.funcType instanceof NestedGenericType {
    
    // Bind outer type params
    bindTypeParams(call.funcType.outer)  

    // Bind inner params
    bindTypeParams(call.funcType.inner)

  }

  // Check call arguments

}

// Class types
class ClassType extends Type {
  fields: List<Field>
  methods: List<Method>
}

// Interface types
class InterfaceType extends Type {
  methods: List<MethodSignature>
}

// Generic types
class GenericType extends Type {
  typeParameters: List<TypeParameter>
  elementType: Type 
}

// Modules 
class ModuleSymbolTable {
  // Contains symbols for a module
}


// Class types
class ClassType extends Type {
  fields: List<VariableDecl>
  methods: List<FunctionDecl>
}

// Interface types
class InterfaceType extends Type {
  methods: List<FunctionSignature> 
}

// Generic types
class GenericType extends Type {
  typeParams: List<TypeParameter>
  elementType: Type
}



