// Check types
func checkType(type Node) {
  match type {
    ClassType(name) -> {
      if !symbols.contains(name) {
        error("Undefined class "+name)
      }
    }
    
    InterfaceType(name) -> {
      if !symbols.contains(name) {
        error("Undefined interface "+name)
      }
    }  
    
    GenericType(params, elementType) -> {
      checkType(elementType) // Check base type
    }
  }
}

// Check function calls
func checkCall(call CallNode) {

  let funcType = resolveType(call.func)

  if funcType isnot FunctionType {
    error("Not a function")
  }
  
  if call.args.length != funcType.paramTypes.length {
    error("Arg count mismatch")
  }
  
  // Check arg types match 
}

// Check binary operators
func checkBinary(op Node) {

  let leftType = typeOf(op.left)
  let rightType = typeOf(op.right)

  if leftType != rightType {
    error("Type mismatch")
  }

  // Further checks...
}

// Report errors
func error(msg string) {
  print("Error: "+msg)
  exit(1) // Stop compilation
}

